import express from "express";
import type { Request, Response } from "express";
import { Client } from "pg";

const app = express();
const started = Date.now();
const PORT = Number(process.env.PORT || 3001);
const ENV = process.env.NODE_ENV || "development";

function routeIndex(): string[] {
  return ["/api/health", "/api/_routes"];
}

app.get("/api/_routes", (_req: Request, res: Response) => {
  res.json({ ok: true, routes: routeIndex() });
});

app.get("/api/health", async (_req: Request, res: Response) => {
  const url = process.env.DATABASE_URL;
  const payload: Record<string, any> = {
    ok: true,
    service: "api",
    env: ENV,
    uptime_ms: Date.now() - started,
    db: "error",
  };

  if (!url) {
    payload.db_error = "DATABASE_URL missing";
    return res.json(payload);
  }

  let client: Client | null = null;
  try {
    client = new Client({
      connectionString: url,
      ssl: { rejectUnauthorized: false },
      connectionTimeoutMillis: 1000,
    });
    await client.connect();
    const r = await client.query("select 1 as db");
    payload.db = "ok";
    payload.db_name = r.rows?.[0]?.db || null;
    return res.json(payload);
  } catch (e: any) {
    payload.db_error = e?.message || String(e);
    return res.json(payload);
  } finally {
    try { await client?.end(); } catch {}
  }
});

app.listen(PORT, () => {
  console.log(JSON.stringify({
    ts: new Date().toISOString(),
    service: "api",
    event: "server_started",
    port: PORT,
    env: ENV,
  }));
});

